**GlossExtractionEngine**

It is a framework to extract definitional sentences from large datasets. 

The core of the framework is based on the filters, transformations, parsers, feature extractors, samplers and modelers you use. Thus it is extensible and customizable for your needs. All you need to do is extend the base functionatlity and write your own filters, transformations, parsers, feature extractors, samplers and modelers. 

The framework comes packaged with:


1. **Filters**: 
	Basic sentence length filter.

2. **Transformations**: 
	Lowercase transformation, remove non alphanumeric transformation, remove non english tokens, wiktionary definition transformation

3. **Parsers**: 
	Wikipedia parser flow as the map-reduce paradigm.

4. **Samplers**: 
	Random sampler(basic random sampler implementation)

5. **Feature Extractors**: 
	**SentenceTokensFeatureExtractor**: extracts basic sentence features like tokens

	**POSContextSequenceFeatureExtractor**: extracts contextual features based on Part of speech tags around the word of interest(head noun phrase)

	**MaltParsedSentenceFeatureExtractor**: extracts basic sentence features for sentences that are parsed with malt parser( i.e tokens in sentence have pos tags with them)

	**MaltParsedPOSContextSequenceFeatureExtractor**: extracts contextual features based on Part of speech tags around the word of interest for sentences that are parsed with malt parser( i.e tokens in sentence have pos tags with them)

6. **Interfaces**: You can interact with samplers and feature extractors through a simple commands.
	**SamplingInterface**: to interact with Samplers
	
        *python sample_interface.py <positive_source_file> <negative_source_file> <train_set_size> <test_set_size>* 
	

	***FeatureExtractionInterface**: to interact with Feature Extractors
	
	*python feature_extraction_interface.py <dataset_location> <train_set_size> <test_set_size>*

7. **Single-point-of-Interaction**: You can interact with framework through a single point which interacts with components to perform operations.

	**run.py** : you can interact with samplers and feature extractors through this.

	*python run.py <operation_name> <parameters for operation>*

	**supported operations(NOTE: Use operation name without quotes)**

	*(1) operation name: 'sampling' , parameters: <positive_source_file> <negative_source_file> <train_set_size> <test_set_size>*

	*(2) operation name: 'extract_features' , parameters: <dataset_location> <train_set_size> <test_set_size>*